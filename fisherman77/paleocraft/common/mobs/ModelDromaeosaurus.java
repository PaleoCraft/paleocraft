// Date: 12/13/2014 1:52:42 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package fisherman77.paleocraft.common.mobs;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelDromaeosaurus extends ModelBase
{
 
	protected double distanceMovedTotal = 50.0D;
	// don't make this too large or animations will be skipped
	protected static final double CYCLES_PER_BLOCK = 1.5D; 
	
	protected int  cycleIndex = 0;
	protected float[][] undulationCycle = new float[][]
	{
			{ 0F, 0F, 0F, 0F , 0F, 0F, 0F, 0F},
			{  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
			{  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
			{  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
			{   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
			{   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
			{   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
			{ -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
			{ -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
			{ -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
			{ -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
			{ -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
			{ -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
			/* {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    {  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
	    {   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
	   { -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
	    { -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	   {   0F, -45F,  45F,  45F,   0F, -45F, -45F,   0F },
	    {  45F, -90F,   0F,  45F,  45F,   0F, -45F, -45F },
	    { 0F, 0F, 0F, 0F , 0F, 0F, 0F, 0F},
		{  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
		{  45F, -45F, -45F,   0F,  45F,  45F,   0F, -45F },
		{   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
		{   0F,  45F, -45F, -45F,   0F,  45F,  45F,   0F },
		{ -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
		{ -45F,  90F,   0F, -45F, -45F,   0F,  45F,  45F },
		{ -45F,  45F,  45F,   0F, -45F, -45F,   0F,  45F },
	    { 0F, 0F, 0F, 0F , 0F, 0F, 0F, 0F},*/
	};
	
	
	
	
	
	
	//fields
    ModelRenderer LeftArm1;
    ModelRenderer LeftArm2;
    ModelRenderer RightArm1;
    ModelRenderer RightArm2;
    ModelRenderer Neck1;
    ModelRenderer Neck2;
    ModelRenderer Body;
    ModelRenderer LefLegPiece;
    ModelRenderer HeadPiece;
    ModelRenderer TailPiece1;
    ModelRenderer RightLegPiece;
  ModelRenderer LeftLeg1;
  ModelRenderer LeftLeg2;
  ModelRenderer LeftFoot;
  ModelRenderer LeftClaw;
  ModelRenderer Head;
  ModelRenderer Crest;
  ModelRenderer SnoutTip;
  ModelRenderer Snout;
  ModelRenderer Tail1;
 ModelRenderer TailPiece2;
 ModelRenderer Tail2;
  ModelRenderer TailPiece3;
  ModelRenderer Tail3;
  ModelRenderer TailPiece4;
  ModelRenderer Tail4;
  ModelRenderer TailPiece5;
  ModelRenderer Tail5;
  ModelRenderer TailFan;
  ModelRenderer RightLeg1;
  ModelRenderer RightLeg2;
  ModelRenderer RightFoot;
  ModelRenderer RightClaw;
  
  public ModelDromaeosaurus()
  {
    textureWidth = 100;
    textureHeight = 100;
    
      LeftArm1 = new ModelRenderer(this, 6, 5);
      LeftArm1.addBox(0F, 0F, -1F, 1, 3, 4);
      LeftArm1.setRotationPoint(3F, 11F, -4F);
      LeftArm1.setTextureSize(100, 100);
      LeftArm1.mirror = true;
      setRotation(LeftArm1, 0.4363323F, 0F, 0F);
      LeftArm2 = new ModelRenderer(this, 37, 72);
      LeftArm2.addBox(0F, 3F, -4F, 1, 5, 6);
      LeftArm2.setRotationPoint(3F, 11F, -4F);
      LeftArm2.setTextureSize(100, 100);
      LeftArm2.mirror = true;
      setRotation(LeftArm2, 0.4363323F, 0F, 0F);
      RightArm1 = new ModelRenderer(this, 6, 5);
      RightArm1.addBox(-1F, 0F, -1F, 1, 3, 4);
      RightArm1.setRotationPoint(-3F, 11F, -4F);
      RightArm1.setTextureSize(100, 100);
      RightArm1.mirror = true;
      setRotation(RightArm1, 0.4363323F, 0F, 0F);
      RightArm2 = new ModelRenderer(this, 37, 72);
      RightArm2.addBox(-1F, 3F, -4F, 1, 5, 6);
      RightArm2.setRotationPoint(-3F, 11F, -4F);
      RightArm2.setTextureSize(100, 100);
      RightArm2.mirror = true;
      setRotation(RightArm2, 0.4363323F, 0F, 0F);
      Neck1 = new ModelRenderer(this, 9, 23);
      Neck1.addBox(-2F, -4F, -4F, 4, 5, 4);
      Neck1.setRotationPoint(0F, 11F, -3F);
      Neck1.setTextureSize(100, 100);
      Neck1.mirror = true;
      setRotation(Neck1, -0.418879F, 0F, 0F);
      Neck2 = new ModelRenderer(this, 12, 41);
      Neck2.addBox(-1F, -2F, -7F, 2, 4, 7);
      Neck2.setRotationPoint(0F, 9F, -5F);
      Neck2.setTextureSize(100, 100);
      Neck2.mirror = true;
      setRotation(Neck2, -0.715585F, 0F, 0F);
      Body = new ModelRenderer(this, 0, 15);
      Body.addBox(-3F, -3F, 0F, 6, 7, 11);
      Body.setRotationPoint(0F, 9F, -5F);
      Body.setTextureSize(100, 100);
      Body.mirror = true;
      setRotation(Body, 0F, 0F, 0F);
    LefLegPiece = new ModelRenderer(this, "LefLegPiece");
    LefLegPiece.setRotationPoint(2F, 11F, 3F);
    setRotation(LefLegPiece, 0F, 0F, 0F);
    LefLegPiece.mirror = true;
     // LefLegPiece.addBox("LeftLeg1", 0F, -2F, -2F, 2, 8, 5);
     // LefLegPiece.addBox("LeftLeg2", 0F, 5F, 2F, 2, 7, 2);
     // LefLegPiece.addBox("LeftFoot", 0F, 12F, 0F, 2, 1, 4);
     // LefLegPiece.addBox("LeftClaw", 0F, 10F, 0F, 0, 2, 2);
    ModelRenderer LeftLeg1 = new ModelRenderer(this, 35, 18);
    LeftLeg1.addBox(0F, -2F, -2F, 2, 8, 5);
    ModelRenderer LeftLeg2 = new ModelRenderer(this, 47, 33);
    LeftLeg2.addBox(0F, 5F, 2F, 2, 7, 2);
    ModelRenderer LeftFoot = new ModelRenderer(this, 56, 33);
    LeftFoot.addBox(0F, 12F, 0F, 2, 1, 4);
    ModelRenderer LeftClaw = new ModelRenderer(this, 37, -1);
    LeftClaw.addBox(0F, 10F, 0F, 0, 2, 2);
    
    
    
    
    
    //  modelDromie.addChildModelRenderer(LefLegPiece);
    HeadPiece = new ModelRenderer(this, "HeadPiece");
    HeadPiece.setRotationPoint(0F, 5F, -10F);
    setRotation(HeadPiece, 0F, 0F, 0F);
    HeadPiece.mirror = true;
    //  HeadPiece.addBox("Head", -1.5F, -2F, -4F, 3, 4, 5);
    //  HeadPiece.addBox("Crest", 0F, -6F, -4F, 0, 5, 8);
    //  HeadPiece.addBox("SnoutTip", -1F, -1F, -9F, 2, 3, 2);
    //  HeadPiece.addBox("Snout", -1F, -2F, -7F, 2, 4, 3);
    //  modelDromie.addChildModelRenderer(HeadPiece);
    ModelRenderer Head = new ModelRenderer(this, 57, 0);
    Head.addBox(-1.5F, -2F, -4F, 3, 4, 5);
    ModelRenderer Crest = new ModelRenderer(this, 19, -8);
    Crest.addBox(0F, -6F, -4F, 0, 5, 8);
    ModelRenderer SnoutTip = new ModelRenderer(this, 27, 10);
    SnoutTip.addBox(-1F, -1F, -9F, 2, 3, 2);
    ModelRenderer Snout = new ModelRenderer(this, 42, 8);
    Snout.addBox(-1F, -2F, -7F, 2, 4, 3);
      
    
    
    TailPiece1 = new ModelRenderer(this, "TailPiece1");
    TailPiece1.setRotationPoint(0F, 9F, 6F);
    setRotation(TailPiece1, 0F, 0F, 0F);
    TailPiece1.mirror = true;
      //TailPiece1.addBox("Tail1", -2.5F, -3F, 0F, 5, 7, 3);
    ModelRenderer Tail1 = new ModelRenderer(this, 76, 12);
    Tail1.addBox(-2.5F, -3F, 0F, 5, 7, 3);
      
      
      
      TailPiece2 = new ModelRenderer(this, "TailPiece2");
    TailPiece2.setRotationPoint(0F, 0F, 3F);
    setRotation(TailPiece2, 0F, 0F, 0F);
    TailPiece2.mirror = true;
     // TailPiece2.addBox("Tail2", -2F, -3F, 0F, 4, 6, 5);
    ModelRenderer Tail2 = new ModelRenderer(this, 72, 23);
    Tail2.addBox(-2F, -3F, 0F, 4, 6, 5);
      
      
      
      
      TailPiece3 = new ModelRenderer(this, "TailPiece3");
    TailPiece3.setRotationPoint(0F, 0.5F, 5F);
    setRotation(TailPiece3, 0F, 0F, 0F);
    TailPiece3.mirror = true;
     // TailPiece3.addBox("Tail3", -1F, -3F, 0F, 2, 4, 9);
    ModelRenderer Tail3 = new ModelRenderer(this, 42, 48);
    Tail3.addBox(-1F, -3F, 0F, 2, 4, 9);
      
      
      
      
      TailPiece4 = new ModelRenderer(this, "TailPiece4");
    TailPiece4.setRotationPoint(0F, -1.5F, 9F);
    setRotation(TailPiece4, 0F, 0F, 0F);
    TailPiece4.mirror = true;
    //  TailPiece4.addBox("Tail4", -1F, -1F, 0F, 2, 3, 9);
    ModelRenderer Tail4 = new ModelRenderer(this, 65, 41);
    Tail4.addBox(-1F, -1F, 0F, 2, 3, 9);
      
      
      TailPiece5 = new ModelRenderer(this, "TailPiece5");
    TailPiece5.setRotationPoint(0F, 0.5F, 9F);
    setRotation(TailPiece5, 0F, 0F, 0F);
    TailPiece5.mirror = true;
    //  TailPiece5.addBox("Tail5", -1F, -1F, 0F, 2, 2, 9);
    //  TailPiece5.addBox("TailFan", -3.5F, -0.5F, 5F, 7, 1, 17);
    ModelRenderer Tail5 = new ModelRenderer(this, 17, 57);
    Tail5.addBox(-1F, -1F, 0F, 2, 2, 9);
    ModelRenderer TailFan = new ModelRenderer(this, 52, 72);
    TailFan.addBox(-3.5F, -0.5F, 5F, 7, 1, 17);
      
      //  TailPiece4.addChildModelRenderer(TailPiece5);
    //  TailPiece3.addChildModelRenderer(TailPiece4);
    //  TailPiece2.addChildModelRenderer(TailPiece3);
     // TailPiece1.addChildModelRenderer(TailPiece2);
    //  modelDromie.addChildModelRenderer(TailPiece1);
    RightLegPiece = new ModelRenderer(this, "RightLegPiece");
    RightLegPiece.setRotationPoint(-2F, 11F, 3F);
    setRotation(RightLegPiece, 0F, 0F, 0F);
    RightLegPiece.mirror = true;
    //  RightLegPiece.addBox("RightLeg1", -2F, -2F, -2F, 2, 8, 5);
    //  RightLegPiece.addBox("RightLeg2", -2F, 5F, 2F, 2, 7, 2);
    //  RightLegPiece.addBox("RightFoot", -2F, 12F, 0F, 2, 1, 4);
    //  RightLegPiece.addBox("RightClaw", 0F, 10F, 0F, 0, 2, 2);
   //   modelDromie.addChildModelRenderer(RightLegPiece);
    ModelRenderer RightLeg1 = new ModelRenderer(this, 51, 18);
    RightLeg1.addBox(-2F, -2F, -2F, 2, 8, 5);
    ModelRenderer RightLeg2 = new ModelRenderer(this, 36, 33);
    RightLeg2.addBox(-2F, 5F, 2F, 2, 7, 2);
    ModelRenderer RightFoot = new ModelRenderer(this, 56, 33);
    RightFoot.addBox(-2F, 12F, 0F, 2, 1, 4);
    ModelRenderer RightClaw = new ModelRenderer(this, 37, -1);
    RightClaw.addBox(0F, 10F, 0F, 0, 2, 2);
  
    
    TailPiece4.addChild(TailPiece5); 
    TailPiece3.addChild(TailPiece4);
    TailPiece2.addChild(TailPiece3);
    TailPiece1.addChild(TailPiece2);
  
    
    
    LefLegPiece.addChild(LeftLeg1);
    LefLegPiece.addChild(LeftLeg2);
    LefLegPiece.addChild(LeftFoot);
    LefLegPiece.addChild(LeftClaw);
    HeadPiece.addChild(Head);
    HeadPiece.addChild(Crest);
    HeadPiece.addChild(SnoutTip);
    HeadPiece.addChild(Snout);
  TailPiece1.addChild(Tail1);
  TailPiece2.addChild(Tail2);
  TailPiece3.addChild(Tail3);
  TailPiece4.addChild(Tail4);
  TailPiece5.addChild(Tail5);
  TailPiece5.addChild(TailFan);
  RightLegPiece.addChild(RightLeg1);
  RightLegPiece.addChild(RightLeg2);
  RightLegPiece.addChild(RightFoot);
  RightLegPiece.addChild(RightClaw);
  
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    LeftArm1.render(f5);
    LeftArm2.render(f5);
    RightArm1.render(f5);
    RightArm2.render(f5);
    Neck1.render(f5);
    Neck2.render(f5);
    Body.render(f5);
    LefLegPiece.render(f5);
    HeadPiece.render(f5);
    TailPiece1.render(f5);
    RightLegPiece.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity parEntity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
    super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
    HeadPiece.rotateAngleY = f3 / 57.29578F;
	  HeadPiece.rotateAngleX = f4 / 57.29578F;
	  this.LefLegPiece.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
	   this.RightLegPiece.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
	   updateDistanceMovedTotal(parEntity);
	   cycleIndex = (int) ((getDistanceMovedTotal(parEntity)*CYCLES_PER_BLOCK)
	         %undulationCycle.length);
	   // DEBUG THIS WILL SPAM THE CONSOLE. STOP THIS CODE ON MOD RELEASE.
	   /*System.out.println("ModelSpino setRotationAngles(), distanceMoved ="
	         +getDistanceMovedTotal(parEntity)+", cycleIndex ="+cycleIndex);*/
	   TailPiece4.rotateAngleY = degToRad(undulationCycle[cycleIndex][0]) ;
	   TailPiece5.rotateAngleY = degToRad(undulationCycle[cycleIndex][1]) ;
	 //  TailPiece6.rotateAngleY = degToRad(undulationCycle[cycleIndex][2]) ;
	   TailPiece4.rotateAngleY = degToRad(undulationCycle[cycleIndex][2]) ;
	   TailPiece5.rotateAngleY = degToRad(undulationCycle[cycleIndex][3]) ;
	 //  TailPiece6.rotateAngleY = degToRad(undulationCycle[cycleIndex][5]) ;
	   TailPiece4.rotateAngleY = degToRad(undulationCycle[cycleIndex][0]) ;
	   TailPiece5.rotateAngleY = degToRad(undulationCycle[cycleIndex][1]) ;
	 //  TailPiece6.rotateAngleY = degToRad(undulationCycle[cycleIndex][2]) ;
	   TailPiece4.rotateAngleY = degToRad(undulationCycle[cycleIndex][3]) ;
	   TailPiece5.rotateAngleY = degToRad(undulationCycle[cycleIndex][4]) ;
	 //  TailPiece6.rotateAngleY = degToRad(undulationCycle[cycleIndex][5]) ;
  
  
  }
  protected void updateDistanceMovedTotal(Entity parEntity) 
  {
      distanceMovedTotal += parEntity.getDistance(parEntity.prevPosX, parEntity.prevPosY, 
            parEntity.prevPosZ);
  }
  
  protected double getDistanceMovedTotal(Entity parEntity) 
  {
      return (distanceMovedTotal);
  }

  protected float degToRad(float degrees)
  {
      return degrees * (float)Math.PI / 180 ;
  }
}
